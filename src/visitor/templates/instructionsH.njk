{% extends "layout.njk" %}
{% import "macros.njk" as macros %}

{% block main %}
#pragma once

{{ includes }}

// Accounts.
struct F{{ instruction.name | pascalCase }}Accounts {
  {% for account in instruction.accounts %}
    {% if account.docs.length > 0 %}
      {{ macros.docblock(account.docs) }}
    {% endif %}
    {% if account.isOptional %}
      TOptional<FAccountMeta> {{ account.name | pascalCase }};
    {% else %}
      FAccountMeta {{ account.name | pascalCase }};
    {% endif %}
  {% endfor %}
};


struct F{{ instruction.name | pascalCase }}InstructionData {
  {% for arg in instructionArgs %}
    {% if arg.default %}
      {{ arg.type }} {{ arg.name | pascalCase }}{{ arg.typeSuffix }} = {{ arg.value }};
    {% endif %}
  {% endfor %}
};

inline auto serialize(F{{ instruction.name | pascalCase }}InstructionData& Data, borsh::Serializer& Serializer)
{
	return Serializer(
    {%- for arg in instructionArgs -%}
      {%- if arg.default -%}
        Data.{{ arg.name | pascalCase }}
      {%- endif -%}
    {%- endfor -%}
  );
}

{% if hasArgs %}
struct F{{ instruction.name | pascalCase }}InstructionArgs {
  {% for arg in instructionArgs %}
    {% if not arg.default %}
      {{ arg.type }} {{ arg.name | pascalCase }}{{ arg.typeSuffix }};
    {% endif %}
  {% endfor %}
};

inline auto serialize(F{{ instruction.name | pascalCase }}InstructionArgs& Args, borsh::Serializer& Serializer)
{
	return Serializer(
    {%- for arg in instructionArgs -%}
      {%- if not arg.default -%}
        Args.{{ arg.name | pascalCase }}
      {%- endif -%}
    {%- endfor -%}
  );
}
{% endif %}

{% for nestedStruct in typeManifest.nestedStructs %}
{{ nestedStruct }}
{% endfor %}

struct F{{ instruction.name | pascalCase }}Instruction : FInstruction
{
	F{{ instruction.name | pascalCase }}Instruction(
    {% for account in instruction.accounts %}
      {%- if account.isOptional -%}
        TOptional<FPublicKey> In{{ account.name | pascalCase }} = TOptional<FPublicKey>()
      {%- else -%}
        FPublicKey In{{ account.name | pascalCase }}
      {%- endif -%}
      {%- if not loop.last -%},{%- endif -%}
    {% endfor %}
  )
	{
		ProgramId = G{{ program.name | pascalCase }}ID;
    {% for account in instruction.accounts %}
      {%- if account.isOptional -%}
        if (In{{ account.name | pascalCase }}).IsSet()) {
            Accounts.Add(FAccountMeta(In{{ account.name | pascalCase }}.GetValue(), {{ account.isSigner }}, {{ account.isWritable }}));
        }
      {%- else -%}
        Accounts.Add(FAccountMeta(In{{ account.name | pascalCase }}, {{ account.isSigner }}, {{ account.isWritable }}));
      {%- endif -%}
    {% endfor %}
    Accounts.Add(FAccountMeta(G{{ program.name | pascalCase }}ID, false, false));
		F{{ instruction.name | pascalCase }}InstructionData InstructionData;
		Data = BorshSerialize(InstructionData);
	}
};

{% endblock %}   